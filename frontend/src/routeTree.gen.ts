/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as VerifyOTPRouteImport } from './routes/verifyOTP'
import { Route as RegisterRouteImport } from './routes/register'
import { Route as LoginRouteImport } from './routes/login'
import { Route as ForgetPasswordRouteImport } from './routes/forgetPassword'
import { Route as AuthenticatedRouteImport } from './routes/_authenticated'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ResetPasswordTokenRouteImport } from './routes/reset-password.$token'

const VerifyOTPRoute = VerifyOTPRouteImport.update({
  id: '/verifyOTP',
  path: '/verifyOTP',
  getParentRoute: () => rootRouteImport,
} as any)
const RegisterRoute = RegisterRouteImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const ForgetPasswordRoute = ForgetPasswordRouteImport.update({
  id: '/forgetPassword',
  path: '/forgetPassword',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedRoute = AuthenticatedRouteImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ResetPasswordTokenRoute = ResetPasswordTokenRouteImport.update({
  id: '/reset-password/$token',
  path: '/reset-password/$token',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/forgetPassword': typeof ForgetPasswordRoute
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/verifyOTP': typeof VerifyOTPRoute
  '/reset-password/$token': typeof ResetPasswordTokenRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/forgetPassword': typeof ForgetPasswordRoute
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/verifyOTP': typeof VerifyOTPRoute
  '/reset-password/$token': typeof ResetPasswordTokenRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_authenticated': typeof AuthenticatedRoute
  '/forgetPassword': typeof ForgetPasswordRoute
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/verifyOTP': typeof VerifyOTPRoute
  '/reset-password/$token': typeof ResetPasswordTokenRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/forgetPassword'
    | '/login'
    | '/register'
    | '/verifyOTP'
    | '/reset-password/$token'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/forgetPassword'
    | '/login'
    | '/register'
    | '/verifyOTP'
    | '/reset-password/$token'
  id:
    | '__root__'
    | '/'
    | '/_authenticated'
    | '/forgetPassword'
    | '/login'
    | '/register'
    | '/verifyOTP'
    | '/reset-password/$token'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthenticatedRoute: typeof AuthenticatedRoute
  ForgetPasswordRoute: typeof ForgetPasswordRoute
  LoginRoute: typeof LoginRoute
  RegisterRoute: typeof RegisterRoute
  VerifyOTPRoute: typeof VerifyOTPRoute
  ResetPasswordTokenRoute: typeof ResetPasswordTokenRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/verifyOTP': {
      id: '/verifyOTP'
      path: '/verifyOTP'
      fullPath: '/verifyOTP'
      preLoaderRoute: typeof VerifyOTPRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/forgetPassword': {
      id: '/forgetPassword'
      path: '/forgetPassword'
      fullPath: '/forgetPassword'
      preLoaderRoute: typeof ForgetPasswordRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/reset-password/$token': {
      id: '/reset-password/$token'
      path: '/reset-password/$token'
      fullPath: '/reset-password/$token'
      preLoaderRoute: typeof ResetPasswordTokenRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthenticatedRoute: AuthenticatedRoute,
  ForgetPasswordRoute: ForgetPasswordRoute,
  LoginRoute: LoginRoute,
  RegisterRoute: RegisterRoute,
  VerifyOTPRoute: VerifyOTPRoute,
  ResetPasswordTokenRoute: ResetPasswordTokenRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
